---
- name: "check if {{ disk_dev }} exists"
  stat: "path={{ disk_dev }}"
  register: disk_path

- fail:
    msg: "{{ disk_dev }} isn't defined (path doesn't exist)"
  when: not disk_path.stat.exists

# - setup: gather_subset=hardware
- debug: var=ansible_mounts

- name: "Unmount {{ disk_dev }} partitions if existing"
  mount:
    path: "{{Â item.mount }}"
    state: unmounted
  loop: "{{ ansible_mounts }}"
  when: disk_dev in item.device or '/dev/mapper' in item.device
  # ignore_errors: yes

# - name: "Delete partionning"
#   command: "sgdisk -Z {{ disk_dev }}"

# - name: "Flush partition"
#   command: "partprobe {{ disk_dev }}"

- name: "Read device information (always use unit when probing)"
  parted:
    device: "{{ disk_dev }}"
    unit: MiB
  register: disk_dev_info

- name: "Remove all partitions from disk"
  parted:
    device: "{{ disk_dev }}"
    number: "{{ item.num }}"
    state: absent
  loop: "{{ disk_dev_info.partitions }}"

# - name: "Delete partionning"
#   command: "sgdisk -Z {{ disk_dev }}"

# - name: "Flush partition"
#   command: "partprobe {{ disk_dev }}"

- name: "Zeroize {{ disk_dev }}"
  command: "blkdiscard {{ disk_dev }}"

- name: Create UEFI partition
  parted:
    device: "{{ disk_dev }}"
    name: EFI System Partition
    number: 1
    label: gpt
    flags: [ esp, boot ]
    state: present
    part_end: 513MiB

- setup:

# Fetch the dev of the EFI partion
- set_fact:
    uefi_part: "{{ ansible_devices[disk]['partitions'].keys() | first }}"

- set_fact:
    uefi_part_dev: "/dev/{{ uefi_part }}"

- debug:
    var: uefi_part_dev

- name: Create a FAT32 filesystem on {{ uefi_part_dev }}
  filesystem:
    fstype: vfat
    dev: "{{ uefi_part_dev }}"
    opts: -F32 -n EFI

- name: Create LVM partition
  parted:
    device: "{{ disk_dev }}"
    name: LVM_Partition
    number: 2
    label: gpt
    flags: [ lvm ]
    state: present
    part_start: 513MiB

- setup:

# Fetch the dev of the LVM partion
- set_fact:
    lvm_part_dev: "/dev/{{ ansible_devices[disk]['partitions'].keys() | select('ne', uefi_part) | first }}"

- debug:
    var: lvm_part_dev

# - name: "wipefs{{ lvm_part_dev }}"
#   command: "wipefs --all {{ lvm_part_dev }}"

- name: Encrypt LVM partition
  shell: printf {{ root_password }} |cryptsetup luksFormat --type luks2 {{ lvm_part_dev }} -

- name: Open encrypted partition
  shell: 'echo -n {{ root_password }} |cryptsetup open {{ lvm_part_dev }} cryptlvm -'

- name: Formate LVM partition
  filesystem:
    fstype: lvm
    dev : /dev/mapper/cryptlvm

- name: Create a volume group on top of {{ lvm_part_dev }}  with physical extent size = 32MB
  lvg:
    vg: vg.main
    pvs: /dev/mapper/cryptlvm
    pesize: '32'

- name: Create a swap logical volume
  lvol:
    vg: vg.main
    lv: swap
    size: "{{ 2 * ansible_memtotal_mb }}"

- name: Create a root logical volume
  lvol:
    vg: vg.main
    lv: root
    size: 100%FREE

# - name: Formate swap volume
#   filesystem:
#     fstype: swap
#     dev : /dev/vg.main/swap
- name: Formate swap volume
  command: mkswap /dev/vg.main/swap

- name: Formate root volume
  filesystem:
    fstype: ext4
    dev : /dev/vg.main/root
